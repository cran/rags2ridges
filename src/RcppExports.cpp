// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/rags2ridges.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// NLL
double NLL(const arma::mat S, const arma::mat P);
static SEXP rags2ridges_NLL_try(SEXP SSEXP, SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(NLL(S, P));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_NLL(SEXP SSEXP, SEXP PSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_NLL_try(SSEXP, PSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// PNLL
double PNLL(const arma::mat S, const arma::mat P, const arma::mat T, const double lambda);
static SEXP rags2ridges_PNLL_try(SEXP SSEXP, SEXP PSEXP, SEXP TSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type P(PSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type T(TSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(PNLL(S, P, T, lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_PNLL(SEXP SSEXP, SEXP PSEXP, SEXP TSEXP, SEXP lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_PNLL_try(SSEXP, PSEXP, TSEXP, lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// NLL_fused
double NLL_fused(const Rcpp::List Slist, const Rcpp::List Plist, const arma::vec ns);
static SEXP rags2ridges_NLL_fused_try(SEXP SlistSEXP, SEXP PlistSEXP, SEXP nsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type Slist(SlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Plist(PlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ns(nsSEXP);
    rcpp_result_gen = Rcpp::wrap(NLL_fused(Slist, Plist, ns));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_NLL_fused(SEXP SlistSEXP, SEXP PlistSEXP, SEXP nsSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_NLL_fused_try(SlistSEXP, PlistSEXP, nsSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// PNLL_fused
double PNLL_fused(const Rcpp::List Slist, const Rcpp::List Plist, const arma::vec ns, const Rcpp::List Tlist, const arma::mat lambda);
static SEXP rags2ridges_PNLL_fused_try(SEXP SlistSEXP, SEXP PlistSEXP, SEXP nsSEXP, SEXP TlistSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type Slist(SlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Plist(PlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type Tlist(TlistSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(PNLL_fused(Slist, Plist, ns, Tlist, lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_PNLL_fused(SEXP SlistSEXP, SEXP PlistSEXP, SEXP nsSEXP, SEXP TlistSEXP, SEXP lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_PNLL_fused_try(SlistSEXP, PlistSEXP, nsSEXP, TlistSEXP, lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaPooledS
arma::mat armaPooledS(const Rcpp::List& Slist, const Rcpp::NumericVector ns, const int mle);
static SEXP rags2ridges_armaPooledS_try(SEXP SlistSEXP, SEXP nsSEXP, SEXP mleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Slist(SlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const int >::type mle(mleSEXP);
    rcpp_result_gen = Rcpp::wrap(armaPooledS(Slist, ns, mle));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaPooledS(SEXP SlistSEXP, SEXP nsSEXP, SEXP mleSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaPooledS_try(SlistSEXP, nsSEXP, mleSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaPooledP
arma::mat armaPooledP(const Rcpp::List& Plist, const Rcpp::NumericVector ns, const int mle);
static SEXP rags2ridges_armaPooledP_try(SEXP PlistSEXP, SEXP nsSEXP, SEXP mleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Plist(PlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const int >::type mle(mleSEXP);
    rcpp_result_gen = Rcpp::wrap(armaPooledP(Plist, ns, mle));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaPooledP(SEXP PlistSEXP, SEXP nsSEXP, SEXP mleSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaPooledP_try(PlistSEXP, nsSEXP, mleSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaEigShrink
arma::vec armaEigShrink(const arma::vec dVec, const double lambda, const double cons);
static SEXP rags2ridges_armaEigShrink_try(SEXP dVecSEXP, SEXP lambdaSEXP, SEXP consSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type dVec(dVecSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type cons(consSEXP);
    rcpp_result_gen = Rcpp::wrap(armaEigShrink(dVec, lambda, cons));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaEigShrink(SEXP dVecSEXP, SEXP lambdaSEXP, SEXP consSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaEigShrink_try(dVecSEXP, lambdaSEXP, consSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaEigShrinkAnyTarget
arma::vec armaEigShrinkAnyTarget(const arma::mat& S, const arma::mat& target, const double lambda);
static SEXP rags2ridges_armaEigShrinkAnyTarget_try(SEXP SSEXP, SEXP targetSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(armaEigShrinkAnyTarget(S, target, lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaEigShrinkAnyTarget(SEXP SSEXP, SEXP targetSEXP, SEXP lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaEigShrinkAnyTarget_try(SSEXP, targetSEXP, lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaEigShrinkArchI
arma::vec armaEigShrinkArchI(const arma::vec dVec, const double lambda, const double cons);
static SEXP rags2ridges_armaEigShrinkArchI_try(SEXP dVecSEXP, SEXP lambdaSEXP, SEXP consSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type dVec(dVecSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type cons(consSEXP);
    rcpp_result_gen = Rcpp::wrap(armaEigShrinkArchI(dVec, lambda, cons));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaEigShrinkArchI(SEXP dVecSEXP, SEXP lambdaSEXP, SEXP consSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaEigShrinkArchI_try(dVecSEXP, lambdaSEXP, consSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaRidgePAnyTarget
arma::mat armaRidgePAnyTarget(const arma::mat& S, const arma::mat& target, const double lambda, int invert);
static SEXP rags2ridges_armaRidgePAnyTarget_try(SEXP SSEXP, SEXP targetSEXP, SEXP lambdaSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(armaRidgePAnyTarget(S, target, lambda, invert));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaRidgePAnyTarget(SEXP SSEXP, SEXP targetSEXP, SEXP lambdaSEXP, SEXP invertSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaRidgePAnyTarget_try(SSEXP, targetSEXP, lambdaSEXP, invertSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaRidgePScalarTarget
arma::mat armaRidgePScalarTarget(const arma::mat& S, const double alpha, const double lambda, int invert);
static SEXP rags2ridges_armaRidgePScalarTarget_try(SEXP SSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(armaRidgePScalarTarget(S, alpha, lambda, invert));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaRidgePScalarTarget(SEXP SSEXP, SEXP alphaSEXP, SEXP lambdaSEXP, SEXP invertSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaRidgePScalarTarget_try(SSEXP, alphaSEXP, lambdaSEXP, invertSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaRidgeP
arma::mat armaRidgeP(const arma::mat& S, const arma::mat& target, const double lambda, int invert);
static SEXP rags2ridges_armaRidgeP_try(SEXP SSEXP, SEXP targetSEXP, SEXP lambdaSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(armaRidgeP(S, target, lambda, invert));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaRidgeP(SEXP SSEXP, SEXP targetSEXP, SEXP lambdaSEXP, SEXP invertSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaRidgeP_try(SSEXP, targetSEXP, lambdaSEXP, invertSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaFusedUpdateI
arma::mat armaFusedUpdateI(int g0, const Rcpp::List& Plist, const Rcpp::List& Slist, const Rcpp::List& Tlist, const arma::vec& ns, const arma::mat& lambda);
static SEXP rags2ridges_armaFusedUpdateI_try(SEXP g0SEXP, SEXP PlistSEXP, SEXP SlistSEXP, SEXP TlistSEXP, SEXP nsSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Plist(PlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Slist(SlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Tlist(TlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(armaFusedUpdateI(g0, Plist, Slist, Tlist, ns, lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaFusedUpdateI(SEXP g0SEXP, SEXP PlistSEXP, SEXP SlistSEXP, SEXP TlistSEXP, SEXP nsSEXP, SEXP lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaFusedUpdateI_try(g0SEXP, PlistSEXP, SlistSEXP, TlistSEXP, nsSEXP, lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaFusedUpdateII
arma::mat armaFusedUpdateII(int g0, const Rcpp::List& Plist, const Rcpp::List& Slist, const Rcpp::List& Tlist, const arma::vec ns, const arma::mat lambda);
static SEXP rags2ridges_armaFusedUpdateII_try(SEXP g0SEXP, SEXP PlistSEXP, SEXP SlistSEXP, SEXP TlistSEXP, SEXP nsSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Plist(PlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Slist(SlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Tlist(TlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(armaFusedUpdateII(g0, Plist, Slist, Tlist, ns, lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaFusedUpdateII(SEXP g0SEXP, SEXP PlistSEXP, SEXP SlistSEXP, SEXP TlistSEXP, SEXP nsSEXP, SEXP lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaFusedUpdateII_try(g0SEXP, PlistSEXP, SlistSEXP, TlistSEXP, nsSEXP, lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaFusedUpdateIII
arma::mat armaFusedUpdateIII(int g0, const Rcpp::List& Plist, const Rcpp::List& Slist, const Rcpp::List& Tlist, const arma::vec& ns, const arma::mat& lambda);
static SEXP rags2ridges_armaFusedUpdateIII_try(SEXP g0SEXP, SEXP PlistSEXP, SEXP SlistSEXP, SEXP TlistSEXP, SEXP nsSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< int >::type g0(g0SEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Plist(PlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Slist(SlistSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Tlist(TlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(armaFusedUpdateIII(g0, Plist, Slist, Tlist, ns, lambda));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaFusedUpdateIII(SEXP g0SEXP, SEXP PlistSEXP, SEXP SlistSEXP, SEXP TlistSEXP, SEXP nsSEXP, SEXP lambdaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaFusedUpdateIII_try(g0SEXP, PlistSEXP, SlistSEXP, TlistSEXP, nsSEXP, lambdaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaRidgeP_fused
Rcpp::List armaRidgeP_fused(const Rcpp::List& Slist, const arma::vec& ns, const Rcpp::List& Tlist, const arma::mat& lambda, const Rcpp::List& Plist, const int maxit, const double eps, const bool relative, const bool verbose);
static SEXP rags2ridges_armaRidgeP_fused_try(SEXP SlistSEXP, SEXP nsSEXP, SEXP TlistSEXP, SEXP lambdaSEXP, SEXP PlistSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP relativeSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Slist(SlistSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Tlist(TlistSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type Plist(PlistSEXP);
    Rcpp::traits::input_parameter< const int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const bool >::type relative(relativeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(armaRidgeP_fused(Slist, ns, Tlist, lambda, Plist, maxit, eps, relative, verbose));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaRidgeP_fused(SEXP SlistSEXP, SEXP nsSEXP, SEXP TlistSEXP, SEXP lambdaSEXP, SEXP PlistSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP relativeSEXP, SEXP verboseSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaRidgeP_fused_try(SlistSEXP, nsSEXP, TlistSEXP, lambdaSEXP, PlistSEXP, maxitSEXP, epsSEXP, relativeSEXP, verboseSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rmvnormal
arma::mat rmvnormal(const int n, arma::rowvec mu, arma::mat sigma);
static SEXP rags2ridges_rmvnormal_try(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnormal(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_rmvnormal(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_rmvnormal_try(nSEXP, muSEXP, sigmaSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaRWishart
arma::cube armaRWishart(const int n, const arma::mat& sigma, const double nu);
static SEXP rags2ridges_armaRWishart_try(SEXP nSEXP, SEXP sigmaSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(armaRWishart(n, sigma, nu));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaRWishart(SEXP nSEXP, SEXP sigmaSEXP, SEXP nuSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaRWishart_try(nSEXP, sigmaSEXP, nuSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaRInvWishart
arma::cube armaRInvWishart(const int n, const arma::mat& psi, const double nu);
static SEXP rags2ridges_armaRInvWishart_try(SEXP nSEXP, SEXP psiSEXP, SEXP nuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< const double >::type nu(nuSEXP);
    rcpp_result_gen = Rcpp::wrap(armaRInvWishart(n, psi, nu));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP rags2ridges_armaRInvWishart(SEXP nSEXP, SEXP psiSEXP, SEXP nuSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(rags2ridges_armaRInvWishart_try(nSEXP, psiSEXP, nuSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// armaRidgePchordalInitWorkhorse
arma::mat armaRidgePchordalInitWorkhorse(arma::mat S, const double lambda, arma::mat target, std::string type, Rcpp::List Cliques, Rcpp::List Separators);
RcppExport SEXP rags2ridges_armaRidgePchordalInitWorkhorse(SEXP SSEXP, SEXP lambdaSEXP, SEXP targetSEXP, SEXP typeSEXP, SEXP CliquesSEXP, SEXP SeparatorsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type target(targetSEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Cliques(CliquesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type Separators(SeparatorsSEXP);
    rcpp_result_gen = Rcpp::wrap(armaRidgePchordalInitWorkhorse(S, lambda, target, type, Cliques, Separators));
    return rcpp_result_gen;
END_RCPP
}
// armaPenLLreparPforNLM
Rcpp::NumericVector armaPenLLreparPforNLM(const arma::vec x, const arma::mat E1, const arma::mat E2, const arma::mat S, const double lambda, const arma::mat target, const arma::uvec nonzerosR, const arma::uvec nonzerosC);
RcppExport SEXP rags2ridges_armaPenLLreparPforNLM(SEXP xSEXP, SEXP E1SEXP, SEXP E2SEXP, SEXP SSEXP, SEXP lambdaSEXP, SEXP targetSEXP, SEXP nonzerosRSEXP, SEXP nonzerosCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E1(E1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E2(E2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosR(nonzerosRSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosC(nonzerosCSEXP);
    rcpp_result_gen = Rcpp::wrap(armaPenLLreparPforNLM(x, E1, E2, S, lambda, target, nonzerosR, nonzerosC));
    return rcpp_result_gen;
END_RCPP
}
// armaPenLLreparP
const double armaPenLLreparP(const arma::vec x, const arma::mat E1, const arma::mat E2, const arma::mat S, const double lambda, const arma::mat target, const arma::uvec nonzerosR, const arma::uvec nonzerosC);
RcppExport SEXP rags2ridges_armaPenLLreparP(SEXP xSEXP, SEXP E1SEXP, SEXP E2SEXP, SEXP SSEXP, SEXP lambdaSEXP, SEXP targetSEXP, SEXP nonzerosRSEXP, SEXP nonzerosCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E1(E1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E2(E2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosR(nonzerosRSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosC(nonzerosCSEXP);
    rcpp_result_gen = Rcpp::wrap(armaPenLLreparP(x, E1, E2, S, lambda, target, nonzerosR, nonzerosC));
    return rcpp_result_gen;
END_RCPP
}
// armaPenLLreparPgrad
arma::vec armaPenLLreparPgrad(const arma::vec x, const arma::mat E1, const arma::mat E2, const arma::mat S, const double lambda, const arma::mat target, const arma::uvec nonzerosR, const arma::uvec nonzerosC);
RcppExport SEXP rags2ridges_armaPenLLreparPgrad(SEXP xSEXP, SEXP E1SEXP, SEXP E2SEXP, SEXP SSEXP, SEXP lambdaSEXP, SEXP targetSEXP, SEXP nonzerosRSEXP, SEXP nonzerosCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E1(E1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E2(E2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosR(nonzerosRSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosC(nonzerosCSEXP);
    rcpp_result_gen = Rcpp::wrap(armaPenLLreparPgrad(x, E1, E2, S, lambda, target, nonzerosR, nonzerosC));
    return rcpp_result_gen;
END_RCPP
}
// armaPenLLreparGradArchI
arma::vec armaPenLLreparGradArchI(const arma::vec x, const arma::mat E1, const arma::mat E2, const arma::mat S, const double lambda, const arma::mat target, const arma::uvec nonzerosR, const arma::uvec nonzerosC);
RcppExport SEXP rags2ridges_armaPenLLreparGradArchI(SEXP xSEXP, SEXP E1SEXP, SEXP E2SEXP, SEXP SSEXP, SEXP lambdaSEXP, SEXP targetSEXP, SEXP nonzerosRSEXP, SEXP nonzerosCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E1(E1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E2(E2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosR(nonzerosRSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosC(nonzerosCSEXP);
    rcpp_result_gen = Rcpp::wrap(armaPenLLreparGradArchI(x, E1, E2, S, lambda, target, nonzerosR, nonzerosC));
    return rcpp_result_gen;
END_RCPP
}
// armaPenLLreparGradArchII
arma::vec armaPenLLreparGradArchII(const arma::vec x, const arma::mat E1, const arma::mat E2, const arma::mat S, const double lambda, const arma::mat target, const arma::uvec nonzerosR, const arma::uvec nonzerosC);
RcppExport SEXP rags2ridges_armaPenLLreparGradArchII(SEXP xSEXP, SEXP E1SEXP, SEXP E2SEXP, SEXP SSEXP, SEXP lambdaSEXP, SEXP targetSEXP, SEXP nonzerosRSEXP, SEXP nonzerosCSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E1(E1SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type E2(E2SEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type target(targetSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosR(nonzerosRSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type nonzerosC(nonzerosCSEXP);
    rcpp_result_gen = Rcpp::wrap(armaPenLLreparGradArchII(x, E1, E2, S, lambda, target, nonzerosR, nonzerosC));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int rags2ridges_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("double(*NLL)(const arma::mat,const arma::mat)");
        signatures.insert("double(*PNLL)(const arma::mat,const arma::mat,const arma::mat,const double)");
        signatures.insert("double(*NLL.fused)(const Rcpp::List,const Rcpp::List,const arma::vec)");
        signatures.insert("double(*PNLL.fused)(const Rcpp::List,const Rcpp::List,const arma::vec,const Rcpp::List,const arma::mat)");
        signatures.insert("arma::mat(*.armaPooledS)(const Rcpp::List&,const Rcpp::NumericVector,const int)");
        signatures.insert("arma::mat(*.armaPooledP)(const Rcpp::List&,const Rcpp::NumericVector,const int)");
        signatures.insert("arma::vec(*.armaEigShrink)(const arma::vec,const double,const double)");
        signatures.insert("arma::vec(*.armaEigShrinkAnyTarget)(const arma::mat&,const arma::mat&,const double)");
        signatures.insert("arma::vec(*.armaEigShrinkArchI)(const arma::vec,const double,const double)");
        signatures.insert("arma::mat(*.armaRidgePAnyTarget)(const arma::mat&,const arma::mat&,const double,int)");
        signatures.insert("arma::mat(*.armaRidgePScalarTarget)(const arma::mat&,const double,const double,int)");
        signatures.insert("arma::mat(*.armaRidgeP)(const arma::mat&,const arma::mat&,const double,int)");
        signatures.insert("arma::mat(*.armaFusedUpdateI)(int,const Rcpp::List&,const Rcpp::List&,const Rcpp::List&,const arma::vec&,const arma::mat&)");
        signatures.insert("arma::mat(*.armaFusedUpdateII)(int,const Rcpp::List&,const Rcpp::List&,const Rcpp::List&,const arma::vec,const arma::mat)");
        signatures.insert("arma::mat(*.armaFusedUpdateIII)(int,const Rcpp::List&,const Rcpp::List&,const Rcpp::List&,const arma::vec&,const arma::mat&)");
        signatures.insert("Rcpp::List(*.armaRidgeP.fused)(const Rcpp::List&,const arma::vec&,const Rcpp::List&,const arma::mat&,const Rcpp::List&,const int,const double,const bool,const bool)");
        signatures.insert("arma::mat(*rmvnormal)(const int,arma::rowvec,arma::mat)");
        signatures.insert("arma::cube(*.armaRWishart)(const int,const arma::mat&,const double)");
        signatures.insert("arma::cube(*.armaRInvWishart)(const int,const arma::mat&,const double)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP rags2ridges_RcppExport_registerCCallable() { 
    R_RegisterCCallable("rags2ridges", "rags2ridges_NLL", (DL_FUNC)rags2ridges_NLL_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_PNLL", (DL_FUNC)rags2ridges_PNLL_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_NLL.fused", (DL_FUNC)rags2ridges_NLL_fused_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_PNLL.fused", (DL_FUNC)rags2ridges_PNLL_fused_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaPooledS", (DL_FUNC)rags2ridges_armaPooledS_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaPooledP", (DL_FUNC)rags2ridges_armaPooledP_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaEigShrink", (DL_FUNC)rags2ridges_armaEigShrink_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaEigShrinkAnyTarget", (DL_FUNC)rags2ridges_armaEigShrinkAnyTarget_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaEigShrinkArchI", (DL_FUNC)rags2ridges_armaEigShrinkArchI_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaRidgePAnyTarget", (DL_FUNC)rags2ridges_armaRidgePAnyTarget_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaRidgePScalarTarget", (DL_FUNC)rags2ridges_armaRidgePScalarTarget_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaRidgeP", (DL_FUNC)rags2ridges_armaRidgeP_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaFusedUpdateI", (DL_FUNC)rags2ridges_armaFusedUpdateI_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaFusedUpdateII", (DL_FUNC)rags2ridges_armaFusedUpdateII_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaFusedUpdateIII", (DL_FUNC)rags2ridges_armaFusedUpdateIII_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaRidgeP.fused", (DL_FUNC)rags2ridges_armaRidgeP_fused_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_rmvnormal", (DL_FUNC)rags2ridges_rmvnormal_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaRWishart", (DL_FUNC)rags2ridges_armaRWishart_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_.armaRInvWishart", (DL_FUNC)rags2ridges_armaRInvWishart_try);
    R_RegisterCCallable("rags2ridges", "rags2ridges_RcppExport_validate", (DL_FUNC)rags2ridges_RcppExport_validate);
    return R_NilValue;
}
